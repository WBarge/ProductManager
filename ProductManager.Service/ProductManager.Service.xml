<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ProductManager.Service</name>
    </assembly>
    <members>
        <member name="T:ProductManager.Service.Controllers.PingController">
            <summary>
            Class PingController.
            Implements the <see cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="M:ProductManager.Service.Controllers.PingController.Get">
            <summary>
            Will always return a 200
            This endpoint it to be used to validate the service is up and running
            </summary>
            <returns>IActionResult.</returns>
        </member>
        <member name="T:ProductManager.Service.Controllers.ProductsController">
            <summary>
            Class ProductsController.
            Implements the <see cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="F:ProductManager.Service.Controllers.ProductsController.DATA_SIZE">
            <summary>
            The data size
            </summary>
        </member>
        <member name="M:ProductManager.Service.Controllers.ProductsController.GetProducts(ProductManager.Service.Models.Request.ProductListRequest)">
            <summary>
            Gets the products using paging
            The request is a Post method - swagger does not currently support sending data in the body of a Get methods
            </summary>
            <param name="request"></param>
            <returns>IActionResult.</returns>
        </member>
        <member name="M:ProductManager.Service.Controllers.ProductsController.GenerateData(System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,ProductManager.Service.Models.Request.FilterMetaData[]})">
            <summary>
            Generates the data.
            </summary>
            <param name="page">The page.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="filters">Any filters that need to be applied to the data</param>
            <returns>IEnumerable&lt;TestData&gt;.</returns>
        </member>
        <member name="T:ProductManager.Service.Middleware.UiExceptionHandler">
            <summary>
            Class UiExceptionHandler.
            This class is responsible for creating a consistent result message to the client in the case of an error (aka a throw)
            </summary>
        </member>
        <member name="F:ProductManager.Service.Middleware.UiExceptionHandler._next">
            <summary>
            The next
            </summary>
        </member>
        <member name="M:ProductManager.Service.Middleware.UiExceptionHandler.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:ProductManager.Service.Middleware.UiExceptionHandler" /> class.
            </summary>
            <param name="next">The next.</param>
        </member>
        <member name="M:ProductManager.Service.Middleware.UiExceptionHandler.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            called by the system as part of the request pipe-line
            </summary>
            <param name="context">The context.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ProductManager.Service.Middleware.UiExceptionHandler.BuildResponseBodyAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            build response body as an asynchronous operation.
            </summary>
            <param name="context">The context.</param>
            <param name="x">The x.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:ProductManager.Service.Middleware.UiExceptionHandlerExtensions">
            <summary>
            Class UiExceptionHandlerExtensions.
            This class is responsible for registering an exception handler in the pipeline
            </summary>
        </member>
        <member name="M:ProductManager.Service.Middleware.UiExceptionHandlerExtensions.UseUiExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Uses the UI exception handler.
            </summary>
            <param name="builder">The builder.</param>
            <returns>IApplicationBuilder.</returns>
        </member>
        <member name="T:ProductManager.Service.Models.Request.FilterMetaData">
            <summary>
            Class FilterMetaData.
            </summary>
        </member>
        <member name="P:ProductManager.Service.Models.Request.FilterMetaData.SearchValue">
            <summary>
            Gets or sets the search value.
            </summary>
            <value>The search value.</value>
        </member>
        <member name="P:ProductManager.Service.Models.Request.FilterMetaData.MatchMode">
            <summary>
            Gets or sets the match mode.
            </summary>
            <value>The match mode.</value>
        </member>
        <member name="P:ProductManager.Service.Models.Request.FilterMetaData.LogicalOperator">
            <summary>
            Gets or sets the logical operator.
            </summary>
            <value>The logical operator.</value>
        </member>
        <member name="T:ProductManager.Service.Models.Request.ProductListRequest">
            <summary>
            Class ProductListRequest.
            </summary>
        </member>
        <member name="P:ProductManager.Service.Models.Request.ProductListRequest.Page">
            <summary>
            Gets or sets the page.
            </summary>
            <value>The page.</value>
        </member>
        <member name="P:ProductManager.Service.Models.Request.ProductListRequest.PageSize">
            <summary>
            Gets or sets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:ProductManager.Service.Models.Request.ProductListRequest.Filters">
            <summary>
            Gets or sets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="T:ProductManager.Service.Models.Result.ErrorMessageForClient">
            <summary>
            Class ErrorMessageForClient.
            </summary>
        </member>
        <member name="P:ProductManager.Service.Models.Result.ErrorMessageForClient.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:ProductManager.Service.Models.Result.ErrorMessageForClient.ExceptionType">
            <summary>
            Gets or sets the type of the exception.
            </summary>
            <value>The type of the exception.</value>
        </member>
        <member name="M:ProductManager.Service.Models.Result.ErrorMessageForClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProductManager.Service.Models.Result.ErrorMessageForClient"/> class.
            </summary>
        </member>
        <member name="M:ProductManager.Service.Models.Result.ErrorMessageForClient.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ProductManager.Service.Models.Result.ErrorMessageForClient"/> class.
            </summary>
            <param name="x">The x.</param>
        </member>
        <member name="T:ProductManager.Service.Models.Result.TestData">
            <summary>
            Class TestData.
            </summary>
        </member>
        <member name="M:ProductManager.Service.Models.Result.TestData.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="id"></param>
        </member>
        <member name="P:ProductManager.Service.Models.Result.TestData.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:ProductManager.Service.Models.Result.TestData.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:ProductManager.Service.Program">
            <summary>
            Class Program.
            </summary>
        </member>
        <member name="M:ProductManager.Service.Program.Main(System.String[])">
            <summary>
            Defines the entry point of the application.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ProductManager.Service.Program.CreateHostBuilder(System.String[])">
            <summary>
            Creates the host builder.
            </summary>
            <param name="args">The arguments.</param>
            <returns>IHostBuilder.</returns>
        </member>
        <member name="T:ProductManager.Service.Utilities.FilteringEngine">
            <summary>
            Class FilteringEngine.
            </summary>
        </member>
        <member name="M:ProductManager.Service.Utilities.FilteringEngine.Filter``1(System.Collections.Generic.List{``0},System.Collections.Generic.Dictionary{System.String,ProductManager.Service.Models.Request.FilterMetaData[]})">
            <summary>
            Filters the specified filters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data.</param>
            <param name="filters">The filters.
                The result of the values associated with the keys have logical and applied to them.
                The FilterMetaData contain the logical specification within the model for the list of values
            </param>
            <returns>List&lt;T&gt;.</returns>
        </member>
        <member name="M:ProductManager.Service.Utilities.FilteringEngine.BuildWhereCallExpression(System.Collections.Generic.Dictionary{System.String,ProductManager.Service.Models.Request.FilterMetaData[]},System.Type,System.Type,System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Builds the where call expression.
            </summary>
            <param name="filters">The filters.</param>
            <param name="dataType">Type of the data.</param>
            <param name="queryableType">Type of the queryable.</param>
            <param name="castCallExpression">The cast call expression.</param>
            <returns>MethodCallExpression.</returns>
        </member>
        <member name="M:ProductManager.Service.Utilities.FilteringEngine.BuildExpressions(System.Linq.Expressions.ParameterExpression,System.Collections.Generic.Dictionary{System.String,ProductManager.Service.Models.Request.FilterMetaData[]})">
            <summary>
            Builds the expressions.
            </summary>
            <param name="pe">The pe.</param>
            <param name="filters">The filters.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ProductManager.Service.Utilities.FilteringEngine.BuildPropertyExpression(System.Linq.Expressions.Expression,System.String,System.String,System.Object)">
            <summary>
            Builds the property expression.
            </summary>
            <param name="pe">The pe.</param>
            <param name="incomingProperty">The incoming property.</param>
            <param name="comparisonOperation">The comparison operation.</param>
            <param name="compareValue">The compare value.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ProductManager.Service.Utilities.FilteringEngine.BuildValueExpression(System.Linq.Expressions.Expression,System.String,System.String,System.Object)">
            <summary>
            Builds the value expression.
            </summary>
            <param name="workingExpression">The working expression.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="comparisonOperation">The comparison operation.</param>
            <param name="compareValue">The compare value.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ProductManager.Service.Utilities.FilteringEngine.BuildValueExpression(System.Object,System.Linq.Expressions.Expression@)">
            <summary>
            Builds the value expression.
            </summary>
            <param name="compareValue">The compare value.</param>
            <param name="workingExpression">The working expression.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:ProductManager.Service.Utilities.FilteringEngine.BuildComparisonExpression(System.String,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Builds the comparison expression.
            </summary>
            <param name="comparisonOperation">The comparison operation.</param>
            <param name="workingExpression">The working expression.</param>
            <param name="valueExpression">The value expression.</param>
            <returns>Expression.</returns>
            <exception cref="T:System.Exception">Malformed comparison</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">comparisonOperation - null</exception>
        </member>
        <member name="T:ProductManager.Service.Utilities.RootComposition">
            <summary>
            Class RootComposition.
            This class is an implementation of the root composition pattern https://freecontent.manning.com/dependency-injection-in-net-2nd-edition-understanding-the-composition-root/
            We might want to move this class to a different library (dll) so the service application only depends on that different library and the glue library
            </summary>
        </member>
        <member name="M:ProductManager.Service.Utilities.RootComposition.ConfigureDi(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures the di.
            </summary>
            <param name="services">The services.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:ProductManager.Startup">
            <summary>
            Class Startup.
            </summary>
        </member>
        <member name="M:ProductManager.Startup.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:ProductManager.Startup" /> class.
            </summary>
            <param name="env">The env.</param>
        </member>
        <member name="P:ProductManager.Startup.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:ProductManager.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures the services.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:ProductManager.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Configures the specified application.
            </summary>
            <param name="app">The application.</param>
            <param name="env">The env.</param>
        </member>
    </members>
</doc>
