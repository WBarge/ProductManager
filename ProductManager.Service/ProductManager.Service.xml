<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ProductManager.Service</name>
    </assembly>
    <members>
        <member name="T:ProductManager.Service.Controllers.PingController">
            <summary>
            Class PingController.
            Implements the <see cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="M:ProductManager.Service.Controllers.PingController.Get">
            <summary>
            Will always return a 200
            This endpoint it to be used to validate the service is up and running
            </summary>
            <returns>IActionResult.</returns>
        </member>
        <member name="T:ProductManager.Service.Controllers.ProductsController">
            <summary>
            Class ProductsController.
            Implements the <see cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.ControllerBase" />
        </member>
        <member name="F:ProductManager.Service.Controllers.ProductsController.DATA_SIZE">
            <summary>
            The data size
            </summary>
        </member>
        <member name="M:ProductManager.Service.Controllers.ProductsController.Get(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the products using paging
            </summary>
            <param name="page" optional="true">The page number is one based. Will default to 1 if null or less than 1</param>
            <param name="pageSize" optional="true">The number of items on a page. Will cause all data to be returned if null or less than 1</param>
            <returns>IActionResult.</returns>
        </member>
        <member name="M:ProductManager.Service.Controllers.ProductsController.GenerateData(System.Int32,System.Int32)">
            <summary>
            Generates the data.
            </summary>
            <param name="page">The page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>IEnumerable&lt;TestData&gt;.</returns>
        </member>
        <member name="T:ProductManager.Service.Middleware.UiExceptionHandler">
            <summary>
            Class UiExceptionHandler.
            This class is responsible for creating a consistent result message to the client in the case of an error (aka a throw)
            </summary>
        </member>
        <member name="F:ProductManager.Service.Middleware.UiExceptionHandler._next">
            <summary>
            The next
            </summary>
        </member>
        <member name="M:ProductManager.Service.Middleware.UiExceptionHandler.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:ProductManager.Service.Middleware.UiExceptionHandler" /> class.
            </summary>
            <param name="next">The next.</param>
        </member>
        <member name="M:ProductManager.Service.Middleware.UiExceptionHandler.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            called by the system as part of the request pipe-line
            </summary>
            <param name="context">The context.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:ProductManager.Service.Middleware.UiExceptionHandler.BuildResponseBodyAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            build response body as an asynchronous operation.
            </summary>
            <param name="context">The context.</param>
            <param name="x">The x.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:ProductManager.Service.Middleware.UiExceptionHandlerExtensions">
            <summary>
            Class UiExceptionHandlerExtensions.
            This class is responsible for registering an exception handler in the pipeline
            </summary>
        </member>
        <member name="M:ProductManager.Service.Middleware.UiExceptionHandlerExtensions.UseUiExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Uses the UI exception handler.
            </summary>
            <param name="builder">The builder.</param>
            <returns>IApplicationBuilder.</returns>
        </member>
        <member name="T:ProductManager.Service.Models.Result.ErrorMessageForClient">
            <summary>
            Class ErrorMessageForClient.
            </summary>
        </member>
        <member name="P:ProductManager.Service.Models.Result.ErrorMessageForClient.Message">
            <summary>
            Gets or sets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:ProductManager.Service.Models.Result.ErrorMessageForClient.ExceptionType">
            <summary>
            Gets or sets the type of the exception.
            </summary>
            <value>The type of the exception.</value>
        </member>
        <member name="M:ProductManager.Service.Models.Result.ErrorMessageForClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ProductManager.Service.Models.Result.ErrorMessageForClient"/> class.
            </summary>
        </member>
        <member name="M:ProductManager.Service.Models.Result.ErrorMessageForClient.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ProductManager.Service.Models.Result.ErrorMessageForClient"/> class.
            </summary>
            <param name="x">The x.</param>
        </member>
        <member name="T:ProductManager.Service.Models.Result.TestData">
            <summary>
            Class TestData.
            </summary>
        </member>
        <member name="M:ProductManager.Service.Models.Result.TestData.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="id"></param>
        </member>
        <member name="P:ProductManager.Service.Models.Result.TestData.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:ProductManager.Service.Models.Result.TestData.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:ProductManager.Service.Program">
            <summary>
            Class Program.
            </summary>
        </member>
        <member name="M:ProductManager.Service.Program.Main(System.String[])">
            <summary>
            Defines the entry point of the application.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ProductManager.Service.Program.CreateHostBuilder(System.String[])">
            <summary>
            Creates the host builder.
            </summary>
            <param name="args">The arguments.</param>
            <returns>IHostBuilder.</returns>
        </member>
        <member name="T:ProductManager.Service.Utilities.RootComposition">
            <summary>
            Class RootComposition.
            This class is an implementation of the root composition pattern https://freecontent.manning.com/dependency-injection-in-net-2nd-edition-understanding-the-composition-root/
            We might want to move this class to a different library (dll) so the service application only depends on that different library and the glue library
            </summary>
        </member>
        <member name="M:ProductManager.Service.Utilities.RootComposition.ConfigureDi(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures the di.
            </summary>
            <param name="services">The services.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:ProductManager.Startup">
            <summary>
            Class Startup.
            </summary>
        </member>
        <member name="M:ProductManager.Startup.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:ProductManager.Startup" /> class.
            </summary>
            <param name="env">The env.</param>
        </member>
        <member name="P:ProductManager.Startup.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:ProductManager.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures the services.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:ProductManager.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Configures the specified application.
            </summary>
            <param name="app">The application.</param>
            <param name="env">The env.</param>
        </member>
    </members>
</doc>
